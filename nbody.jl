### A Pluto.jl notebook ###
# v0.19.2

using Markdown
using InteractiveUtils

# ‚ïî‚ïê‚ï° 94053080-c5c5-11ec-2e39-638d9d7701a9
begin
	using Pkg
	Pkg.activate(".")
end

# ‚ïî‚ïê‚ï° 9f396ce9-295b-4d80-8020-542d859abfda
begin
	using BenchmarkTools
	using CUDA
	using PlutoUI
	using Plots
	using StaticArrays

	import LinearAlgebra: norm

	AA = AbstractArray
	AF = AbstractFloat
end;

# ‚ïî‚ïê‚ï° 216c518e-a625-4c1a-9164-a8e47ae56e89
md"""
We will either operate in the meter-kilogram-seconds regime or in the AU-M‚äô-day regime. The latter will is favoured for the nicer numbers.

The values of the constants are taken from CODATA/NIST when available.
"""

# ‚ïî‚ïê‚ï° 63afcba6-eb71-4441-98b2-2be887c6fd27
begin
	const MKS = false

	if MKS
		# Standard G in m-kg-s
		const NEWTON_G = 6.674_30e-11
	else
		# Normalized to AU-M‚äô-day
		const NEWTON_G = 2.959_122e-4	
	end
	
	const METER_PER_AU = 1.495_978_706_91e11
	const KG_PER_SOLAR = 1.988_55e30
	const SEC_PER_DAY = 86_400
	const SEC_PER_YEAR = 31_557_600
end;

# ‚ïî‚ïê‚ï° 0982b961-eef9-433b-806c-2d8c03a1de7c
md"""
## Define body properties
"""

# ‚ïî‚ïê‚ï° bce0259d-03fc-4422-b4ff-c2ab5f513f40
struct CelestialBody{T1<:AF, T2<:AA}
	mass::T1
	position::T2
	velocity::T2

	function CelestialBody(mass::AF, position::AA, velocity::AA)
		if !MKS
			mass = mass / KG_PER_SOLAR
			position = position ./ METER_PER_AU
			velocity = velocity .* (SEC_PER_DAY/METER_PER_AU)
		end

		return new{Float64, Vector{Float64}}(mass, position, velocity)
	end
end

# ‚ïî‚ïê‚ï° 87b70d89-25b6-41fb-8d1c-788910ad12d5
bodies = Dict(
	:sun => CelestialBody(KG_PER_SOLAR, [0., 0., 0.], [0., 0., 0.]),
	:mercury => CelestialBody(3.285E+23, [0., 5.7E+10, 0.], [-4.7e4, 0., 0.]),
	:venus => CelestialBody(4.867_3e24, [0., 1.082_10e11, 0.], [-3.5e4, 0., 0.]),
	:earth => CelestialBody(5.972_2e24, [0., METER_PER_AU, 0.], [-3.0e4, 0., 0.]),
	:mars => CelestialBody(2.4e24, [0., 2.2E+11, 0.], [-2.4e4, 0., 0.]),
	:ohno => CelestialBody(11 * 1E+26, [2.2E+11, -5E+11, 0.], [-1e4, 1.2e4, 0.])
)

# ‚ïî‚ïê‚ï° 65f28245-a1cf-4b94-a7b2-23227fc88ad0
md"""
## Read properties and com
"""

# ‚ïî‚ïê‚ï° 286ba8b0-1bf7-41ad-bac6-837f50f265c0
begin
	function transform_to_com!(x::AA, m::AA)
		x .-= sum(x .* m'; dims=2)/sum(m)
		return nothing
	end

	function read_properties(bodies::Dict{Symbol, CelestialBody{Float64, Vector{Float64}}})
		N = length(bodies)
		
		pos = zeros(3, N)
		vel = zeros(3, N)
		mass = zeros(N)

		earth_ind = 0
		
		@inbounds for (ind, (body, prop)) in enumerate(bodies)

			mass[ind] = prop.mass
			pos[:, ind] = prop.position
			vel[:, ind] = prop.velocity

			if body == :earth
				earth_ind = ind
			end
		end

		transform_to_com!(pos, mass)
		transform_to_com!(vel, mass)

		return pos, vel, mass, earth_ind
	end
	
end

# ‚ïî‚ïê‚ï° d3da79cd-c73a-4276-aa3b-7df06c27e840
begin
	(position, velocity, mass, ind) = read_properties(bodies)
	const EARTH = ind
end;

# ‚ïî‚ïê‚ï° e3632e83-4e69-4373-82a6-336b535c07bb
md"""
## Define integrator
"""

# ‚ïî‚ïê‚ï° 7f9145ef-4585-4d85-8dee-4d01f0f8159a
function eq_of_motion!(acc::AA, r·µ¢::AA, r‚±º::AA, mass::AF)
	acc .+= -NEWTON_G./norm(r·µ¢ .- r‚±º).^3 .* mass .* (r·µ¢ .- r‚±º)
end

# ‚ïî‚ïê‚ï° 3f58a3b7-03a9-47fc-8179-5405b0cecded
function compute_acceleration!(acceleration::AA, position::AA, mass::AA)
	
	N = length(mass)
	for ii = 1:N
		@view(acceleration[:, ii]) .= 0
		@inbounds @simd for jj = 1:N		
			if ii ‚â† jj
				eq_of_motion!(
					@view(acceleration[:, ii]),
					SVector{3, Float64}(@view(position[:, ii])),
					SVector{3, Float64}(@view(position[:, jj])),
					mass[jj]
				)
			end
		end
	end
	
end

# ‚ïî‚ïê‚ï° d966399c-b70e-43cc-a2eb-fa3e55e309e3
function euler!(position::AA, velocity::AA, acceleration::AA, mass::AA, Œît::AF)
	position .+=  velocity .* Œît
    velocity .+= acceleration .* Œît
	compute_acceleration!(acceleration, position, mass)
    
	return nothing
end

# ‚ïî‚ïê‚ï° fe4f4cc3-059b-4d6d-882c-bba5267c7915
function verlet!(position::AA, velocity::AA, acceleration::AA, mass::AA, Œît::AF)
    position .+= velocity .* Œît
	position .+= acceleration .* 0.5Œît^2
	
    velocity .+= acceleration .* 0.5Œît
    compute_acceleration!(acceleration, position, mass)
	velocity .+= acceleration .* 0.5Œît

    return nothing
end

# ‚ïî‚ïê‚ï° d5da5f3f-86a5-4288-8c83-50b65af8ca02
function symplectic_euler!(position::AA, velocity::AA, acceleration::AA, mass::AA,  Œît::AF)
	position .+= velocity .* Œît
    compute_acceleration!(acceleration, position, mass)
    velocity .+= acceleration .* Œît

    return nothing

end

# ‚ïî‚ïê‚ï° b3dfb48b-c2f6-478a-bd56-8dabfbc671c7
md"""
## Define root finder for mid ttv transit
"""

# ‚ïî‚ïê‚ï° 812db9b0-1f54-408a-9545-febc08e3d492
begin
	g(pos::AF, vel::AF) = pos * vel
	Œ¥g(pos::AF, vel::AF, acc::AF) = pos * acc + vel^2
		
	function newton_ttv!(
		position::AA, 
		velocity::AA, 
		acceleration::AA, 
		mass::AA,
		integrator!::Function;
		max_iter::Int = 500, 
		tolerance::Float64 = eps(Float64)
	)
	
		Œît = 0.
		fail_tolerance = true

		@inbounds for _ = 1:max_iter
			p‚Çì = position[1, EARTH]
			v‚Çì = velocity[1, EARTH]
			a‚Çì = acceleration[1, EARTH]
			
			Œ¥t = -g(p‚Çì, v‚Çì)/Œ¥g(p‚Çì, v‚Çì, a‚Çì)
			Œît += Œ¥t
			
			integrator!(
				position, 
				velocity, 
				acceleration, 
				mass, 
				Œ¥t
			)

			if abs(position[1, EARTH] ‚â§ tolerance)
				position[0, EARTH] = 0.
				fail_tolerance = false
				break
			end

		end

		if fail_tolerance
			print("WARNING: Root finding tolerance not met")
		end
		
		return Œît
	end

end

# ‚ïî‚ïê‚ï° 3de36c8d-c837-4c17-bc13-24402114aef0
md"""
## Simulation üôè
"""

# ‚ïî‚ïê‚ï° 02080954-c779-4b95-9475-010257e7a5db
md"""
Inputs should always be in AU-M‚äô-days
"""

# ‚ïî‚ïê‚ï° 95b4b2b1-2846-4940-9568-6c93807f74fb
function run_simulation!(
	position::AA, 
	velocity::AA,
	mass::AA;
	num_orbit::Int = 50,
	Œît::AF = 0.1, 
	integrator!::Function = verlet!,
)

	buffer = 25
	
	num_iter = Int(√∑(
		(num_orbit + buffer) * SEC_PER_YEAR, 
		Œît * SEC_PER_DAY, 
		RoundUp
	))
	
	if MKS
		Œît *= SEC_PER_DAY
	end

	num_dims, num_bodies = size(position)
	pos‚Çï, vel‚Çï, acc‚Çï = ntuple(_ -> zeros(num_dims, num_bodies, num_iter+1), 3)
	
	transit_index = zeros(num_orbit)
	transit·µ¢ = 1
	
	# initial conditions
	iter·µ¢ = 1
	pos‚Çï[:, :, 1] = position
	vel‚Çï[:, :, 1] = velocity
	compute_acceleration!(@view(acc‚Çï[:, :, 1]), position, mass)

	# Setting up next index with current value overwriting in loop
	pos‚Çï[:, :, 2] = position
	vel‚Çï[:, :, 2] = velocity
	acc‚Çï[:, :, 2] .= @view(acc‚Çï[:, :, 1])
	
	while transit·µ¢ ‚â§ num_orbit
		iter·µ¢ += 1
		
		# update current iter values and set up next iter values for next loop
		integrator!(
			@view(pos‚Çï[:, :, iter·µ¢]),
			@view(vel‚Çï[:, :, iter·µ¢]),
			@view(acc‚Çï[:, :, iter·µ¢]),
			mass,
			Œît
		)

		# crossed mid-transit line
		if pos‚Çï[1, EARTH, iter·µ¢-1] > 0 && pos‚Çï[1, EARTH, iter·µ¢] < 0

			pos‚Çï[:, :, iter·µ¢] .= @view(pos‚Çï[:, :, iter·µ¢-1])
			vel‚Çï[:, :, iter·µ¢] .= @view(vel‚Çï[:, :, iter·µ¢-1])
			acc‚Çï[:, :, iter·µ¢] .= @view(acc‚Çï[:, :, iter·µ¢-1])
			
			ttv_Œît = newton_ttv!(
				@view(pos‚Çï[:, :, iter·µ¢]), 
				@view(vel‚Çï[:, :, iter·µ¢]), 
				@view(acc‚Çï[:, :, iter·µ¢]),
				mass,
				integrator!
			)

			transit_index[transit·µ¢] = iter·µ¢
			transit·µ¢ += 1
	
		end

		pos‚Çï[:, :, iter·µ¢+1] .= @view(pos‚Çï[:, :, iter·µ¢])
		vel‚Çï[:, :, iter·µ¢+1] .= @view(vel‚Çï[:, :, iter·µ¢])
		acc‚Çï[:, :, iter·µ¢+1] .= @view(acc‚Çï[:, :, iter·µ¢])
	end
	
	return (
		@view(pos‚Çï[:, :, 1:iter·µ¢]), 
		@view(vel‚Çï[:, :, 1:iter·µ¢]), 
		@view(acc‚Çï[:, :, 1:iter·µ¢]), 
		transit_index
	)
	
end

# ‚ïî‚ïê‚ï° 2a8e8994-55c0-4cd8-ae1c-a65b475ce0c1
function run_simulation_v2!(
	position::AA, 
	velocity::AA,
	mass::AA;
	num_orbit::Int = 50,
	Œît::AF = 0.1, 
	integrator!::Function = verlet!,
	save_stride::Int = 10
)

	num_dims, num_bodies = size(position)
	history_length = ceil(Int, num_orbit * SEC_PER_YEAR/SEC_PER_DAY)
	
	# we construct a time and position history array
	# an array holding index of transits for easy extraction later as well
	t‚Çï = zeros(history_length+1)
	pos‚Çï = zeros(num_dims, num_bodies, history_length+1)
	ind_transit = zeros(num_orbit)
	
	# we will use auxiliary arrays to perform the simulations
	# keeping track of previous and current values
	pos‚ÇÄ, vel‚ÇÄ, acc‚ÇÄ = ntuple(_ -> zeros(num_dims, num_bodies), 3)
	pos‚Çã‚ÇÅ, vel‚Çã‚ÇÅ, acc‚Çã‚ÇÅ = ntuple(_ -> zeros(num_dims, num_bodies), 3)
	
	# pre-initialize 
	pos‚Çã‚ÇÅ .= position
	vel‚Çã‚ÇÅ .= velocity
	compute_acceleration!(acc‚Çã‚ÇÅ, position, mass)

	pos‚ÇÄ .= position
	vel‚ÇÄ .= velocity
	acc‚ÇÄ .= acc‚Çã‚ÇÅ

	pos‚Çï[:, :, 1] .= position

	# index and helper variables
	iter·µ¢ = 1 	 # loop number
	transit·µ¢ = 1 # ind_transit latest index
	save·µ¢ = 2 	 # t‚Çï and pos‚Çï latest index
	t·µ¢ = 0 		 # current time
	save_stride = ceil(Int, save_stride √∑ Œît)
	
	if MKS
		# integrator will need the right units!
		Œît *= SEC_PER_DAY
	end

	
	while transit·µ¢ ‚â§ num_orbit

		iter·µ¢ += 1
		
		# update current iter values and set up next iter values for next loop
		integrator!(
			pos‚ÇÄ,
			vel‚ÇÄ,
			acc‚ÇÄ,
			mass,
			Œît
		)

		# crossed mid-transit line
		if pos‚ÇÄ[1, EARTH] < 0 && pos‚Çã‚ÇÅ[1, EARTH] > 0

			pos‚ÇÄ .= pos‚Çã‚ÇÅ
			vel‚ÇÄ .= vel‚Çã‚ÇÅ
			acc‚ÇÄ .= acc‚Çã‚ÇÅ
			
			ttv_Œît = newton_ttv!(
				pos‚ÇÄ,
				vel‚ÇÄ,
				acc‚ÇÄ,
				mass,
				integrator!
			)

			t·µ¢ += ttv_Œît

			t‚Çï[save·µ¢] = t·µ¢
			pos‚Çï[:, :, save·µ¢] .= pos‚ÇÄ
			ind_transit[transit·µ¢] = save·µ¢
			
			transit·µ¢ += 1
			save·µ¢ += 1
		else
			t·µ¢ += Œît
			
			if iter·µ¢ % save_stride == 0
				t‚Çï[save·µ¢] = t·µ¢
				pos‚Çï[:, :, save·µ¢] .= pos‚ÇÄ
				save·µ¢ += 1
			end
		end

		pos‚Çã‚ÇÅ .= pos‚ÇÄ
		vel‚Çã‚ÇÅ .= vel‚ÇÄ 
		acc‚Çã‚ÇÅ .= acc‚ÇÄ
		
	end
	
	return (
		@view(t‚Çï[1:save·µ¢-1]), 
		@view(pos‚Çï[:, :, 1:save·µ¢-1]), 
		ind_transit
	)
	
end

# ‚ïî‚ïê‚ï° a9392090-931e-42bb-89a7-71a9d887d912
function set_equal!(A::AA, B::AA)
	@inbounds @simd for ii ‚àà 1:length(B)
		A[ii] = B[ii]
	end
end

# ‚ïî‚ïê‚ï° a8aafe81-9cfd-403f-8db4-365c50b38418
function run_simulation_ttv!(
	position::AA, 
	velocity::AA,
	mass::AA;
	num_orbit::Int = 50,
	Œît::AF = 0.1, 
	integrator!::Function = verlet!,
)

	num_dims, num_bodies = size(position)
	
	# we construct a time and position history array
	# an array holding index of transits for easy extraction later as well
	t‚Çï = zeros(Float64, num_orbit)
	
	# we will use auxiliary arrays to perform the simulations
	# keeping track of previous and current values
	pos‚ÇÄ, vel‚ÇÄ, acc‚ÇÄ = ntuple(_ -> zeros(Float64, num_dims, num_bodies), 3)
	pos‚Çã‚ÇÅ, vel‚Çã‚ÇÅ, acc‚Çã‚ÇÅ = ntuple(_ -> zeros(Float64, num_dims, num_bodies), 3)
	
	# pre-initialize 
	set_equal!(pos‚Çã‚ÇÅ, position)
	set_equal!(vel‚Çã‚ÇÅ, velocity)
	compute_acceleration!(acc‚Çã‚ÇÅ, position, mass)
	
	# pos‚Çã‚ÇÅ .= position
	# vel‚Çã‚ÇÅ .= velocity
	# compute_acceleration!(acc‚Çã‚ÇÅ, position, mass)

	set_equal!(pos‚ÇÄ, position)
	set_equal!(vel‚ÇÄ, velocity)
	set_equal!(acc‚ÇÄ, acc‚Çã‚ÇÅ)


	# index and helper variables
	transit·µ¢ = 1 # ind_transit latest index
	t·µ¢ = 0 		 # current time

	if MKS
		# integrator will need the right units!
		Œît *= SEC_PER_DAY
	end

	
	while transit·µ¢ ‚â§ num_orbit
	
		# update current iter values and set up next iter values for next loop
		integrator!(
			pos‚ÇÄ,
			vel‚ÇÄ,
			acc‚ÇÄ,
			mass,
			Œît
		)

		# crossed mid-transit line
		if pos‚ÇÄ[1, EARTH] < 0 && pos‚Çã‚ÇÅ[1, EARTH] > 0

			set_equal!(pos‚ÇÄ, pos‚Çã‚ÇÅ)
			set_equal!(vel‚ÇÄ, vel‚Çã‚ÇÅ)
			set_equal!(acc‚ÇÄ, acc‚Çã‚ÇÅ)
			
			ttv_Œît = newton_ttv!(
				pos‚ÇÄ,
				vel‚ÇÄ,
				acc‚ÇÄ,
				mass,
				integrator!
			)

			t·µ¢ += ttv_Œît

			t‚Çï[transit·µ¢] = t·µ¢
			transit·µ¢ += 1
		else
			t·µ¢ += Œît
		end

		set_equal!(pos‚Çã‚ÇÅ, pos‚ÇÄ)
		set_equal!(vel‚Çã‚ÇÅ, vel‚ÇÄ)
		set_equal!(acc‚Çã‚ÇÅ, acc‚ÇÄ)

	end
	
	return t‚Çï
	
end

# ‚ïî‚ïê‚ï° aefb3443-6d3d-4ed9-bd7b-cc91d7bebdc8
begin
	run_simulation_ttv!(position, velocity, mass; num_orbit=1, Œît=1.);
	@time run_simulation_ttv!(position, velocity, mass; num_orbit=100, Œît=.01);
end;

# ‚ïî‚ïê‚ï° de847e21-91e0-4269-8804-e6a56d94108f
begin
	run_simulation!(position, velocity, mass; num_orbit=1, Œît=1.);
	@time run_simulation!(position, velocity, mass; num_orbit=100, Œît=1. );
end;

# ‚ïî‚ïê‚ï° 6c3986e5-af34-4877-893f-c502fe1fdb96
begin
	run_simulation_v2!(position, velocity, mass; num_orbit=1, Œît=1.);
	@time run_simulation_v2!(position, velocity, mass; num_orbit=100, Œît=1. );
end;

# ‚ïî‚ïê‚ï° c8b632e6-b397-4359-9394-e7ec903f1ee3
# t, p, tr·µ¢ = run_simulation_v2!(position, velocity, mass; num_orbit=50, Œît=0.01);

# ‚ïî‚ïê‚ï° 39e58870-a0b6-4ae5-a66c-85be1756c2aa
# begin
# 	local ii
# 	@gif for ii in 501:50:size(p)[3]
# 		plot(
# 			@view(p[1, :, ii])', 
# 			@view(p[2, :, ii])',
# 			st=:scatter,
# 			ms=5,
# 			label = nothing
# 		)
		
# 		plot!(
# 			@view(p[1, :, ii-100:ii])', 
# 			@view(p[2, :, ii-100:ii])',
# 			label = nothing,
# 			xlabel = "AU",
# 			ylabel = "AU"
# 		)

# 		xlims!(-6, 6)
# 		ylims!(-6, 6)
# 	end
# end

# ‚ïî‚ïê‚ï° 2726c764-4256-46a7-badd-07e29a5136cb
# begin
# 	a = zeros(Float64, 3, 8)
# 	b = fill(9., (3, 8))

# 	function update!(a, b)
# 		a .= @view(b[:, :])
# 	end

# 	function update2!(a, b)
# 		a .= b
# 	end

# 	function update3!(a, b)
# 		@inbounds @simd for i ‚àà length(a)
# 			a[i] = b[i]
# 		end
# 	end
	
# 	update!([0, 0], [0, 0])
# 	update2!([0, 0], [0, 0])
# 	update3!([0, 0], [0, 0])
# end;

# ‚ïî‚ïê‚ï° 5316d985-9bb2-4677-99d7-7e6f076debae
# @benchmark update!($a, $b)

# ‚ïî‚ïê‚ï° c0fdc933-5c35-496c-be07-f4623a0a0690
# @benchmark update2!($a, $b)

# ‚ïî‚ïê‚ï° a48be474-0186-4eab-b062-580b31cea91a
# @benchmark update3!($a, $b)

# ‚ïî‚ïê‚ï° Cell order:
# ‚ï†‚ïê94053080-c5c5-11ec-2e39-638d9d7701a9
# ‚ï†‚ïê9f396ce9-295b-4d80-8020-542d859abfda
# ‚ïü‚îÄ216c518e-a625-4c1a-9164-a8e47ae56e89
# ‚ï†‚ïê63afcba6-eb71-4441-98b2-2be887c6fd27
# ‚ïü‚îÄ0982b961-eef9-433b-806c-2d8c03a1de7c
# ‚ï†‚ïêbce0259d-03fc-4422-b4ff-c2ab5f513f40
# ‚ï†‚ïê87b70d89-25b6-41fb-8d1c-788910ad12d5
# ‚ïü‚îÄ65f28245-a1cf-4b94-a7b2-23227fc88ad0
# ‚ï†‚ïê286ba8b0-1bf7-41ad-bac6-837f50f265c0
# ‚ï†‚ïêd3da79cd-c73a-4276-aa3b-7df06c27e840
# ‚ïü‚îÄe3632e83-4e69-4373-82a6-336b535c07bb
# ‚ï†‚ïê7f9145ef-4585-4d85-8dee-4d01f0f8159a
# ‚ï†‚ïê3f58a3b7-03a9-47fc-8179-5405b0cecded
# ‚ï†‚ïêd966399c-b70e-43cc-a2eb-fa3e55e309e3
# ‚ï†‚ïêfe4f4cc3-059b-4d6d-882c-bba5267c7915
# ‚ï†‚ïêd5da5f3f-86a5-4288-8c83-50b65af8ca02
# ‚ïü‚îÄb3dfb48b-c2f6-478a-bd56-8dabfbc671c7
# ‚ï†‚ïê812db9b0-1f54-408a-9545-febc08e3d492
# ‚ïü‚îÄ3de36c8d-c837-4c17-bc13-24402114aef0
# ‚ïü‚îÄ02080954-c779-4b95-9475-010257e7a5db
# ‚ï†‚ïê95b4b2b1-2846-4940-9568-6c93807f74fb
# ‚ï†‚ïê2a8e8994-55c0-4cd8-ae1c-a65b475ce0c1
# ‚ï†‚ïêa9392090-931e-42bb-89a7-71a9d887d912
# ‚ï†‚ïêa8aafe81-9cfd-403f-8db4-365c50b38418
# ‚ï†‚ïêaefb3443-6d3d-4ed9-bd7b-cc91d7bebdc8
# ‚ï†‚ïêde847e21-91e0-4269-8804-e6a56d94108f
# ‚ï†‚ïê6c3986e5-af34-4877-893f-c502fe1fdb96
# ‚ï†‚ïêc8b632e6-b397-4359-9394-e7ec903f1ee3
# ‚ï†‚ïê39e58870-a0b6-4ae5-a66c-85be1756c2aa
# ‚ï†‚ïê2726c764-4256-46a7-badd-07e29a5136cb
# ‚ï†‚ïê5316d985-9bb2-4677-99d7-7e6f076debae
# ‚ï†‚ïêc0fdc933-5c35-496c-be07-f4623a0a0690
# ‚ï†‚ïêa48be474-0186-4eab-b062-580b31cea91a
